package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// HouryAPIUsage represents a row from 'usage_based_billing.houry_api_usage'.
type HouryAPIUsage struct {
	AccountID uint64    `json:"account_id"` // account_id
	Hour      string    `json:"hour"`       // hour
	Usage     uint64    `json:"usage"`      // usage
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [HouryAPIUsage] exists in the database.
func (hau *HouryAPIUsage) Exists() bool {
	return hau._exists
}

// Deleted returns true when the [HouryAPIUsage] has been marked for deletion
// from the database.
func (hau *HouryAPIUsage) Deleted() bool {
	return hau._deleted
}

// Insert inserts the [HouryAPIUsage] to the database.
func (hau *HouryAPIUsage) Insert(ctx context.Context, db DB) error {
	switch {
	case hau._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case hau._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO usage_based_billing.houry_api_usage (` +
		`account_id, hour, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, hau.AccountID, hau.Hour, hau.Usage, hau.CreatedAt, hau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, hau.AccountID, hau.Hour, hau.Usage, hau.CreatedAt, hau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	hau._exists = true
	return nil
}

// Update updates a [HouryAPIUsage] in the database.
func (hau *HouryAPIUsage) Update(ctx context.Context, db DB) error {
	switch {
	case !hau._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case hau._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.houry_api_usage SET ` +
		`usage = ?, created_at = ?, updated_at = ? ` +
		`WHERE account_id = ? AND hour = ?`
	// run
	logf(sqlstr, hau.Usage, hau.CreatedAt, hau.UpdatedAt, hau.AccountID, hau.Hour)
	if _, err := db.ExecContext(ctx, sqlstr, hau.Usage, hau.CreatedAt, hau.UpdatedAt, hau.AccountID, hau.Hour); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [HouryAPIUsage] to the database.
func (hau *HouryAPIUsage) Save(ctx context.Context, db DB) error {
	if hau.Exists() {
		return hau.Update(ctx, db)
	}
	return hau.Insert(ctx, db)
}

// Upsert performs an upsert for [HouryAPIUsage].
func (hau *HouryAPIUsage) Upsert(ctx context.Context, db DB) error {
	switch {
	case hau._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.houry_api_usage (` +
		`account_id, hour, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), hour = VALUES(hour), usage = VALUES(usage), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, hau.AccountID, hau.Hour, hau.Usage, hau.CreatedAt, hau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, hau.AccountID, hau.Hour, hau.Usage, hau.CreatedAt, hau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	hau._exists = true
	return nil
}

// Delete deletes the [HouryAPIUsage] from the database.
func (hau *HouryAPIUsage) Delete(ctx context.Context, db DB) error {
	switch {
	case !hau._exists: // doesn't exist
		return nil
	case hau._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM usage_based_billing.houry_api_usage ` +
		`WHERE account_id = ? AND hour = ?`
	// run
	logf(sqlstr, hau.AccountID, hau.Hour)
	if _, err := db.ExecContext(ctx, sqlstr, hau.AccountID, hau.Hour); err != nil {
		return logerror(err)
	}
	// set deleted
	hau._deleted = true
	return nil
}

// HouryAPIUsageByAccountIDHour retrieves a row from 'usage_based_billing.houry_api_usage' as a [HouryAPIUsage].
//
// Generated from index 'houry_api_usage_account_id_hour_pkey'.
func HouryAPIUsageByAccountIDHour(ctx context.Context, db DB, accountID uint64, hour string) (*HouryAPIUsage, error) {
	// query
	const sqlstr = `SELECT ` +
		`account_id, hour, usage, created_at, updated_at ` +
		`FROM usage_based_billing.houry_api_usage ` +
		`WHERE account_id = ? AND hour = ?`
	// run
	logf(sqlstr, accountID, hour)
	hau := HouryAPIUsage{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, accountID, hour).Scan(&hau.AccountID, &hau.Hour, &hau.Usage, &hau.CreatedAt, &hau.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &hau, nil
}
