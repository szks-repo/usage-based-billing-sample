package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// ActiveAPIKey represents a row from 'usage_based_billing.active_api_key'.
type ActiveAPIKey struct {
	ID        uint64    `json:"id"`         // id
	AccountID uint64    `json:"account_id"` // account_id
	APIKey    string    `json:"api_key"`    // api_key
	ExpiredAt time.Time `json:"expired_at"` // expired_at
	CreatedAt time.Time `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ActiveAPIKey] exists in the database.
func (aak *ActiveAPIKey) Exists() bool {
	return aak._exists
}

// Deleted returns true when the [ActiveAPIKey] has been marked for deletion
// from the database.
func (aak *ActiveAPIKey) Deleted() bool {
	return aak._deleted
}

// Insert inserts the [ActiveAPIKey] to the database.
func (aak *ActiveAPIKey) Insert(ctx context.Context, db DB) error {
	switch {
	case aak._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aak._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.active_api_key (` +
		`account_id, api_key, expired_at, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	aak.ID = uint64(id)
	// set exists
	aak._exists = true
	return nil
}

// Update updates a [ActiveAPIKey] in the database.
func (aak *ActiveAPIKey) Update(ctx context.Context, db DB) error {
	switch {
	case !aak._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aak._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.active_api_key SET ` +
		`account_id = ?, api_key = ?, expired_at = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt, aak.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt, aak.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ActiveAPIKey] to the database.
func (aak *ActiveAPIKey) Save(ctx context.Context, db DB) error {
	if aak.Exists() {
		return aak.Update(ctx, db)
	}
	return aak.Insert(ctx, db)
}

// Upsert performs an upsert for [ActiveAPIKey].
func (aak *ActiveAPIKey) Upsert(ctx context.Context, db DB) error {
	switch {
	case aak._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.active_api_key (` +
		`id, account_id, api_key, expired_at, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), api_key = VALUES(api_key), expired_at = VALUES(expired_at), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, aak.ID, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, aak.ID, aak.AccountID, aak.APIKey, aak.ExpiredAt, aak.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	aak._exists = true
	return nil
}

// Delete deletes the [ActiveAPIKey] from the database.
func (aak *ActiveAPIKey) Delete(ctx context.Context, db DB) error {
	switch {
	case !aak._exists: // doesn't exist
		return nil
	case aak._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.active_api_key ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aak.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aak.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aak._deleted = true
	return nil
}

// ActiveAPIKeyByID retrieves a row from 'usage_based_billing.active_api_key' as a [ActiveAPIKey].
//
// Generated from index 'active_api_key_id_pkey'.
func ActiveAPIKeyByID(ctx context.Context, db DB, id uint64) (*ActiveAPIKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, api_key, expired_at, created_at ` +
		`FROM usage_based_billing.active_api_key ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	aak := ActiveAPIKey{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&aak.ID, &aak.AccountID, &aak.APIKey, &aak.ExpiredAt, &aak.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &aak, nil
}

// ActiveAPIKeyByAPIKey retrieves a row from 'usage_based_billing.active_api_key' as a [ActiveAPIKey].
//
// Generated from index 'api_key'.
func ActiveAPIKeyByAPIKey(ctx context.Context, db DB, apiKey string) (*ActiveAPIKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, api_key, expired_at, created_at ` +
		`FROM usage_based_billing.active_api_key ` +
		`WHERE api_key = ?`
	// run
	logf(sqlstr, apiKey)
	aak := ActiveAPIKey{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, apiKey).Scan(&aak.ID, &aak.AccountID, &aak.APIKey, &aak.ExpiredAt, &aak.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &aak, nil
}
