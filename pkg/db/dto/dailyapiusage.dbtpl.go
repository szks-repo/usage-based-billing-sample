package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// DailyAPIUsage represents a row from 'usage_based_billing.daily_api_usage'.
type DailyAPIUsage struct {
	AccountID uint64    `json:"account_id"` // account_id
	Date      string    `json:"date"`       // date
	Usage     uint64    `json:"usage"`      // usage
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DailyAPIUsage] exists in the database.
func (dau *DailyAPIUsage) Exists() bool {
	return dau._exists
}

// Deleted returns true when the [DailyAPIUsage] has been marked for deletion
// from the database.
func (dau *DailyAPIUsage) Deleted() bool {
	return dau._deleted
}

// Insert inserts the [DailyAPIUsage] to the database.
func (dau *DailyAPIUsage) Insert(ctx context.Context, db DB) error {
	switch {
	case dau._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dau._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO usage_based_billing.daily_api_usage (` +
		`account_id, date, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, dau.AccountID, dau.Date, dau.Usage, dau.CreatedAt, dau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dau.AccountID, dau.Date, dau.Usage, dau.CreatedAt, dau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dau._exists = true
	return nil
}

// Update updates a [DailyAPIUsage] in the database.
func (dau *DailyAPIUsage) Update(ctx context.Context, db DB) error {
	switch {
	case !dau._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dau._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.daily_api_usage SET ` +
		`usage = ?, created_at = ?, updated_at = ? ` +
		`WHERE account_id = ? AND date = ?`
	// run
	logf(sqlstr, dau.Usage, dau.CreatedAt, dau.UpdatedAt, dau.AccountID, dau.Date)
	if _, err := db.ExecContext(ctx, sqlstr, dau.Usage, dau.CreatedAt, dau.UpdatedAt, dau.AccountID, dau.Date); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DailyAPIUsage] to the database.
func (dau *DailyAPIUsage) Save(ctx context.Context, db DB) error {
	if dau.Exists() {
		return dau.Update(ctx, db)
	}
	return dau.Insert(ctx, db)
}

// Upsert performs an upsert for [DailyAPIUsage].
func (dau *DailyAPIUsage) Upsert(ctx context.Context, db DB) error {
	switch {
	case dau._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.daily_api_usage (` +
		`account_id, date, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), date = VALUES(date), usage = VALUES(usage), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, dau.AccountID, dau.Date, dau.Usage, dau.CreatedAt, dau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dau.AccountID, dau.Date, dau.Usage, dau.CreatedAt, dau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dau._exists = true
	return nil
}

// Delete deletes the [DailyAPIUsage] from the database.
func (dau *DailyAPIUsage) Delete(ctx context.Context, db DB) error {
	switch {
	case !dau._exists: // doesn't exist
		return nil
	case dau._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM usage_based_billing.daily_api_usage ` +
		`WHERE account_id = ? AND date = ?`
	// run
	logf(sqlstr, dau.AccountID, dau.Date)
	if _, err := db.ExecContext(ctx, sqlstr, dau.AccountID, dau.Date); err != nil {
		return logerror(err)
	}
	// set deleted
	dau._deleted = true
	return nil
}

// DailyAPIUsageByAccountIDDate retrieves a row from 'usage_based_billing.daily_api_usage' as a [DailyAPIUsage].
//
// Generated from index 'daily_api_usage_account_id_date_pkey'.
func DailyAPIUsageByAccountIDDate(ctx context.Context, db DB, accountID uint64, date string) (*DailyAPIUsage, error) {
	// query
	const sqlstr = `SELECT ` +
		`account_id, date, usage, created_at, updated_at ` +
		`FROM usage_based_billing.daily_api_usage ` +
		`WHERE account_id = ? AND date = ?`
	// run
	logf(sqlstr, accountID, date)
	dau := DailyAPIUsage{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, accountID, date).Scan(&dau.AccountID, &dau.Date, &dau.Usage, &dau.CreatedAt, &dau.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dau, nil
}
