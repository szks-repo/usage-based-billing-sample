package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// Subscription represents a row from 'usage_based_billing.subscription'.
type Subscription struct {
	ID          uint64    `json:"id"`           // id
	AccountID   uint64    `json:"account_id"`   // account_id
	From        time.Time `json:"from"`         // from
	EstimatedTo time.Time `json:"estimated_to"` // estimated_to
	CreatedAt   time.Time `json:"created_at"`   // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Subscription] exists in the database.
func (s *Subscription) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Subscription] has been marked for deletion
// from the database.
func (s *Subscription) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Subscription] to the database.
func (s *Subscription) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.subscription (` +
		`account_id, from, estimated_to, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	s.ID = uint64(id)
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Subscription] in the database.
func (s *Subscription) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.subscription SET ` +
		`account_id = ?, from = ?, estimated_to = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Subscription] to the database.
func (s *Subscription) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Subscription].
func (s *Subscription) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.subscription (` +
		`id, account_id, from, estimated_to, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), from = VALUES(from), estimated_to = VALUES(estimated_to), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, s.ID, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.AccountID, s.From, s.EstimatedTo, s.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Subscription] from the database.
func (s *Subscription) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.subscription ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SubscriptionByAccountIDFrom retrieves a row from 'usage_based_billing.subscription' as a [Subscription].
//
// Generated from index 'account_id'.
func SubscriptionByAccountIDFrom(ctx context.Context, db DB, accountID uint64, from time.Time) (*Subscription, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, from, estimated_to, created_at ` +
		`FROM usage_based_billing.subscription ` +
		`WHERE account_id = ? AND from = ?`
	// run
	logf(sqlstr, accountID, from)
	s := Subscription{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, accountID, from).Scan(&s.ID, &s.AccountID, &s.From, &s.EstimatedTo, &s.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// SubscriptionByID retrieves a row from 'usage_based_billing.subscription' as a [Subscription].
//
// Generated from index 'subscription_id_pkey'.
func SubscriptionByID(ctx context.Context, db DB, id uint64) (*Subscription, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, from, estimated_to, created_at ` +
		`FROM usage_based_billing.subscription ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	s := Subscription{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.AccountID, &s.From, &s.EstimatedTo, &s.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// Account returns the Account associated with the [Subscription]'s (AccountID).
//
// Generated from foreign key 'subscription_ibfk_1'.
func (s *Subscription) Account(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, s.AccountID)
}
