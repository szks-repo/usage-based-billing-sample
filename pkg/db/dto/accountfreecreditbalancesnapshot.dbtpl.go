package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// AccountFreeCreditBalanceSnapshot represents a row from 'usage_based_billing.account_free_credit_balance_snapshot'.
type AccountFreeCreditBalanceSnapshot struct {
	ID        uint64    `json:"id"`         // id
	AccountID uint64    `json:"account_id"` // account_id
	Credit    int       `json:"credit"`     // credit
	CreatedAt time.Time `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AccountFreeCreditBalanceSnapshot] exists in the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Exists() bool {
	return afcbs._exists
}

// Deleted returns true when the [AccountFreeCreditBalanceSnapshot] has been marked for deletion
// from the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Deleted() bool {
	return afcbs._deleted
}

// Insert inserts the [AccountFreeCreditBalanceSnapshot] to the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Insert(ctx context.Context, db DB) error {
	switch {
	case afcbs._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case afcbs._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.account_free_credit_balance_snapshot (` +
		`account_id, credit, created_at` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	afcbs.ID = uint64(id)
	// set exists
	afcbs._exists = true
	return nil
}

// Update updates a [AccountFreeCreditBalanceSnapshot] in the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Update(ctx context.Context, db DB) error {
	switch {
	case !afcbs._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case afcbs._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.account_free_credit_balance_snapshot SET ` +
		`account_id = ?, credit = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt, afcbs.ID)
	if _, err := db.ExecContext(ctx, sqlstr, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt, afcbs.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AccountFreeCreditBalanceSnapshot] to the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Save(ctx context.Context, db DB) error {
	if afcbs.Exists() {
		return afcbs.Update(ctx, db)
	}
	return afcbs.Insert(ctx, db)
}

// Upsert performs an upsert for [AccountFreeCreditBalanceSnapshot].
func (afcbs *AccountFreeCreditBalanceSnapshot) Upsert(ctx context.Context, db DB) error {
	switch {
	case afcbs._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.account_free_credit_balance_snapshot (` +
		`id, account_id, credit, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), credit = VALUES(credit), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, afcbs.ID, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, afcbs.ID, afcbs.AccountID, afcbs.Credit, afcbs.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	afcbs._exists = true
	return nil
}

// Delete deletes the [AccountFreeCreditBalanceSnapshot] from the database.
func (afcbs *AccountFreeCreditBalanceSnapshot) Delete(ctx context.Context, db DB) error {
	switch {
	case !afcbs._exists: // doesn't exist
		return nil
	case afcbs._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.account_free_credit_balance_snapshot ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, afcbs.ID)
	if _, err := db.ExecContext(ctx, sqlstr, afcbs.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	afcbs._deleted = true
	return nil
}

// AccountFreeCreditBalanceSnapshotByID retrieves a row from 'usage_based_billing.account_free_credit_balance_snapshot' as a [AccountFreeCreditBalanceSnapshot].
//
// Generated from index 'account_free_credit_balance_snapshot_id_pkey'.
func AccountFreeCreditBalanceSnapshotByID(ctx context.Context, db DB, id uint64) (*AccountFreeCreditBalanceSnapshot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, credit, created_at ` +
		`FROM usage_based_billing.account_free_credit_balance_snapshot ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	afcbs := AccountFreeCreditBalanceSnapshot{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&afcbs.ID, &afcbs.AccountID, &afcbs.Credit, &afcbs.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &afcbs, nil
}

// AccountFreeCreditBalanceSnapshotByAccountID retrieves a row from 'usage_based_billing.account_free_credit_balance_snapshot' as a [AccountFreeCreditBalanceSnapshot].
//
// Generated from index 'account_id'.
func AccountFreeCreditBalanceSnapshotByAccountID(ctx context.Context, db DB, accountID uint64) ([]*AccountFreeCreditBalanceSnapshot, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, credit, created_at ` +
		`FROM usage_based_billing.account_free_credit_balance_snapshot ` +
		`WHERE account_id = ?`
	// run
	logf(sqlstr, accountID)
	rows, err := db.QueryContext(ctx, sqlstr, accountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AccountFreeCreditBalanceSnapshot
	for rows.Next() {
		afcbs := AccountFreeCreditBalanceSnapshot{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&afcbs.ID, &afcbs.AccountID, &afcbs.Credit, &afcbs.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &afcbs)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Account returns the Account associated with the [AccountFreeCreditBalanceSnapshot]'s (AccountID).
//
// Generated from foreign key 'account_free_credit_balance_snapshot_ibfk_1'.
func (afcbs *AccountFreeCreditBalanceSnapshot) Account(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, afcbs.AccountID)
}
