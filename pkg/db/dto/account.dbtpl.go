// Package dto contains generated code for schema 'usage_based_billing'.
package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Account represents a row from 'usage_based_billing.account'.
type Account struct {
	ID          uint64         `json:"id"`           // id
	AccountName string         `json:"account_name"` // account_name
	Timezone    sql.NullString `json:"timezone"`     // timezone
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	UpdatedAt   time.Time      `json:"updated_at"`   // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Account] exists in the database.
func (a *Account) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Account] has been marked for deletion
// from the database.
func (a *Account) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Account] to the database.
func (a *Account) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.account (` +
		`account_name, timezone, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt)
	res, err := db.ExecContext(ctx, sqlstr, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	a.ID = uint64(id)
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Account] in the database.
func (a *Account) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.account SET ` +
		`account_name = ?, timezone = ?, created_at = ?, updated_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Account] to the database.
func (a *Account) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Account].
func (a *Account) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.account (` +
		`id, account_name, timezone, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_name = VALUES(account_name), timezone = VALUES(timezone), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, a.ID, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.AccountName, a.Timezone, a.CreatedAt, a.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Account] from the database.
func (a *Account) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AccountByID retrieves a row from 'usage_based_billing.account' as a [Account].
//
// Generated from index 'account_id_pkey'.
func AccountByID(ctx context.Context, db DB, id uint64) (*Account, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_name, timezone, created_at, updated_at ` +
		`FROM usage_based_billing.account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	a := Account{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.AccountName, &a.Timezone, &a.CreatedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}
