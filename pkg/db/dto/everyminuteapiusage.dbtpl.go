package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// EveryMinuteAPIUsage represents a row from 'usage_based_billing.every_minute_api_usage'.
type EveryMinuteAPIUsage struct {
	AccountID uint64    `json:"account_id"` // account_id
	Minute    string    `json:"minute"`     // minute
	Usage     uint64    `json:"usage"`      // usage
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EveryMinuteAPIUsage] exists in the database.
func (emau *EveryMinuteAPIUsage) Exists() bool {
	return emau._exists
}

// Deleted returns true when the [EveryMinuteAPIUsage] has been marked for deletion
// from the database.
func (emau *EveryMinuteAPIUsage) Deleted() bool {
	return emau._deleted
}

// Insert inserts the [EveryMinuteAPIUsage] to the database.
func (emau *EveryMinuteAPIUsage) Insert(ctx context.Context, db DB) error {
	switch {
	case emau._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case emau._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO usage_based_billing.every_minute_api_usage (` +
		`account_id, minute, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, emau.AccountID, emau.Minute, emau.Usage, emau.CreatedAt, emau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, emau.AccountID, emau.Minute, emau.Usage, emau.CreatedAt, emau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	emau._exists = true
	return nil
}

// Update updates a [EveryMinuteAPIUsage] in the database.
func (emau *EveryMinuteAPIUsage) Update(ctx context.Context, db DB) error {
	switch {
	case !emau._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case emau._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.every_minute_api_usage SET ` +
		`usage = ?, created_at = ?, updated_at = ? ` +
		`WHERE account_id = ? AND minute = ?`
	// run
	logf(sqlstr, emau.Usage, emau.CreatedAt, emau.UpdatedAt, emau.AccountID, emau.Minute)
	if _, err := db.ExecContext(ctx, sqlstr, emau.Usage, emau.CreatedAt, emau.UpdatedAt, emau.AccountID, emau.Minute); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EveryMinuteAPIUsage] to the database.
func (emau *EveryMinuteAPIUsage) Save(ctx context.Context, db DB) error {
	if emau.Exists() {
		return emau.Update(ctx, db)
	}
	return emau.Insert(ctx, db)
}

// Upsert performs an upsert for [EveryMinuteAPIUsage].
func (emau *EveryMinuteAPIUsage) Upsert(ctx context.Context, db DB) error {
	switch {
	case emau._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.every_minute_api_usage (` +
		`account_id, minute, usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), minute = VALUES(minute), usage = VALUES(usage), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, emau.AccountID, emau.Minute, emau.Usage, emau.CreatedAt, emau.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, emau.AccountID, emau.Minute, emau.Usage, emau.CreatedAt, emau.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	emau._exists = true
	return nil
}

// Delete deletes the [EveryMinuteAPIUsage] from the database.
func (emau *EveryMinuteAPIUsage) Delete(ctx context.Context, db DB) error {
	switch {
	case !emau._exists: // doesn't exist
		return nil
	case emau._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM usage_based_billing.every_minute_api_usage ` +
		`WHERE account_id = ? AND minute = ?`
	// run
	logf(sqlstr, emau.AccountID, emau.Minute)
	if _, err := db.ExecContext(ctx, sqlstr, emau.AccountID, emau.Minute); err != nil {
		return logerror(err)
	}
	// set deleted
	emau._deleted = true
	return nil
}

// EveryMinuteAPIUsageByAccountIDMinute retrieves a row from 'usage_based_billing.every_minute_api_usage' as a [EveryMinuteAPIUsage].
//
// Generated from index 'every_minute_api_usage_account_id_minute_pkey'.
func EveryMinuteAPIUsageByAccountIDMinute(ctx context.Context, db DB, accountID uint64, minute string) (*EveryMinuteAPIUsage, error) {
	// query
	const sqlstr = `SELECT ` +
		`account_id, minute, usage, created_at, updated_at ` +
		`FROM usage_based_billing.every_minute_api_usage ` +
		`WHERE account_id = ? AND minute = ?`
	// run
	logf(sqlstr, accountID, minute)
	emau := EveryMinuteAPIUsage{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, accountID, minute).Scan(&emau.AccountID, &emau.Minute, &emau.Usage, &emau.CreatedAt, &emau.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &emau, nil
}
