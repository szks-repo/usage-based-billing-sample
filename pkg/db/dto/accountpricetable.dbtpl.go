package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// AccountPriceTable represents a row from 'usage_based_billing.account_price_table'.
type AccountPriceTable struct {
	ID            uint64    `json:"id"`              // id
	AccountID     uint64    `json:"account_id"`      // account_id
	MinUsage      int       `json:"min_usage"`       // min_usage
	MaxUsage      int       `json:"max_usage"`       // max_usage
	PricePerUsage float64   `json:"price_per_usage"` // price_per_usage
	CreatedAt     time.Time `json:"created_at"`      // created_at
	UpdatedAt     time.Time `json:"updated_at"`      // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AccountPriceTable] exists in the database.
func (apt *AccountPriceTable) Exists() bool {
	return apt._exists
}

// Deleted returns true when the [AccountPriceTable] has been marked for deletion
// from the database.
func (apt *AccountPriceTable) Deleted() bool {
	return apt._deleted
}

// Insert inserts the [AccountPriceTable] to the database.
func (apt *AccountPriceTable) Insert(ctx context.Context, db DB) error {
	switch {
	case apt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case apt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.account_price_table (` +
		`account_id, min_usage, max_usage, price_per_usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt)
	res, err := db.ExecContext(ctx, sqlstr, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	apt.ID = uint64(id)
	// set exists
	apt._exists = true
	return nil
}

// Update updates a [AccountPriceTable] in the database.
func (apt *AccountPriceTable) Update(ctx context.Context, db DB) error {
	switch {
	case !apt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case apt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.account_price_table SET ` +
		`account_id = ?, min_usage = ?, max_usage = ?, price_per_usage = ?, created_at = ?, updated_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt, apt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt, apt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AccountPriceTable] to the database.
func (apt *AccountPriceTable) Save(ctx context.Context, db DB) error {
	if apt.Exists() {
		return apt.Update(ctx, db)
	}
	return apt.Insert(ctx, db)
}

// Upsert performs an upsert for [AccountPriceTable].
func (apt *AccountPriceTable) Upsert(ctx context.Context, db DB) error {
	switch {
	case apt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.account_price_table (` +
		`id, account_id, min_usage, max_usage, price_per_usage, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), min_usage = VALUES(min_usage), max_usage = VALUES(max_usage), price_per_usage = VALUES(price_per_usage), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, apt.ID, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, apt.ID, apt.AccountID, apt.MinUsage, apt.MaxUsage, apt.PricePerUsage, apt.CreatedAt, apt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	apt._exists = true
	return nil
}

// Delete deletes the [AccountPriceTable] from the database.
func (apt *AccountPriceTable) Delete(ctx context.Context, db DB) error {
	switch {
	case !apt._exists: // doesn't exist
		return nil
	case apt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.account_price_table ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, apt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, apt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	apt._deleted = true
	return nil
}

// AccountPriceTableByAccountID retrieves a row from 'usage_based_billing.account_price_table' as a [AccountPriceTable].
//
// Generated from index 'account_id'.
func AccountPriceTableByAccountID(ctx context.Context, db DB, accountID uint64) ([]*AccountPriceTable, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, min_usage, max_usage, price_per_usage, created_at, updated_at ` +
		`FROM usage_based_billing.account_price_table ` +
		`WHERE account_id = ?`
	// run
	logf(sqlstr, accountID)
	rows, err := db.QueryContext(ctx, sqlstr, accountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AccountPriceTable
	for rows.Next() {
		apt := AccountPriceTable{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&apt.ID, &apt.AccountID, &apt.MinUsage, &apt.MaxUsage, &apt.PricePerUsage, &apt.CreatedAt, &apt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &apt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AccountPriceTableByID retrieves a row from 'usage_based_billing.account_price_table' as a [AccountPriceTable].
//
// Generated from index 'account_price_table_id_pkey'.
func AccountPriceTableByID(ctx context.Context, db DB, id uint64) (*AccountPriceTable, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, min_usage, max_usage, price_per_usage, created_at, updated_at ` +
		`FROM usage_based_billing.account_price_table ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	apt := AccountPriceTable{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&apt.ID, &apt.AccountID, &apt.MinUsage, &apt.MaxUsage, &apt.PricePerUsage, &apt.CreatedAt, &apt.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &apt, nil
}

// Account returns the Account associated with the [AccountPriceTable]'s (AccountID).
//
// Generated from foreign key 'account_price_table_ibfk_1'.
func (apt *AccountPriceTable) Account(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, apt.AccountID)
}
