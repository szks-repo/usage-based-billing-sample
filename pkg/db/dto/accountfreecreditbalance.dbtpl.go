package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// AccountFreeCreditBalance represents a row from 'usage_based_billing.account_free_credit_balance'.
type AccountFreeCreditBalance struct {
	ID        uint64    `json:"id"`         // id
	AccountID uint64    `json:"account_id"` // account_id
	Credit    int       `json:"credit"`     // credit
	CreatedAt time.Time `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AccountFreeCreditBalance] exists in the database.
func (afcb *AccountFreeCreditBalance) Exists() bool {
	return afcb._exists
}

// Deleted returns true when the [AccountFreeCreditBalance] has been marked for deletion
// from the database.
func (afcb *AccountFreeCreditBalance) Deleted() bool {
	return afcb._deleted
}

// Insert inserts the [AccountFreeCreditBalance] to the database.
func (afcb *AccountFreeCreditBalance) Insert(ctx context.Context, db DB) error {
	switch {
	case afcb._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case afcb._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.account_free_credit_balance (` +
		`account_id, credit, created_at` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, afcb.AccountID, afcb.Credit, afcb.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, afcb.AccountID, afcb.Credit, afcb.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	afcb.ID = uint64(id)
	// set exists
	afcb._exists = true
	return nil
}

// Update updates a [AccountFreeCreditBalance] in the database.
func (afcb *AccountFreeCreditBalance) Update(ctx context.Context, db DB) error {
	switch {
	case !afcb._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case afcb._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.account_free_credit_balance SET ` +
		`account_id = ?, credit = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, afcb.AccountID, afcb.Credit, afcb.CreatedAt, afcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, afcb.AccountID, afcb.Credit, afcb.CreatedAt, afcb.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AccountFreeCreditBalance] to the database.
func (afcb *AccountFreeCreditBalance) Save(ctx context.Context, db DB) error {
	if afcb.Exists() {
		return afcb.Update(ctx, db)
	}
	return afcb.Insert(ctx, db)
}

// Upsert performs an upsert for [AccountFreeCreditBalance].
func (afcb *AccountFreeCreditBalance) Upsert(ctx context.Context, db DB) error {
	switch {
	case afcb._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.account_free_credit_balance (` +
		`id, account_id, credit, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), credit = VALUES(credit), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, afcb.ID, afcb.AccountID, afcb.Credit, afcb.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, afcb.ID, afcb.AccountID, afcb.Credit, afcb.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	afcb._exists = true
	return nil
}

// Delete deletes the [AccountFreeCreditBalance] from the database.
func (afcb *AccountFreeCreditBalance) Delete(ctx context.Context, db DB) error {
	switch {
	case !afcb._exists: // doesn't exist
		return nil
	case afcb._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.account_free_credit_balance ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, afcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, afcb.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	afcb._deleted = true
	return nil
}

// AccountFreeCreditBalanceByID retrieves a row from 'usage_based_billing.account_free_credit_balance' as a [AccountFreeCreditBalance].
//
// Generated from index 'account_free_credit_balance_id_pkey'.
func AccountFreeCreditBalanceByID(ctx context.Context, db DB, id uint64) (*AccountFreeCreditBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, credit, created_at ` +
		`FROM usage_based_billing.account_free_credit_balance ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	afcb := AccountFreeCreditBalance{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&afcb.ID, &afcb.AccountID, &afcb.Credit, &afcb.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &afcb, nil
}

// AccountFreeCreditBalanceByAccountID retrieves a row from 'usage_based_billing.account_free_credit_balance' as a [AccountFreeCreditBalance].
//
// Generated from index 'account_id'.
func AccountFreeCreditBalanceByAccountID(ctx context.Context, db DB, accountID uint64) ([]*AccountFreeCreditBalance, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, credit, created_at ` +
		`FROM usage_based_billing.account_free_credit_balance ` +
		`WHERE account_id = ?`
	// run
	logf(sqlstr, accountID)
	rows, err := db.QueryContext(ctx, sqlstr, accountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AccountFreeCreditBalance
	for rows.Next() {
		afcb := AccountFreeCreditBalance{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&afcb.ID, &afcb.AccountID, &afcb.Credit, &afcb.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &afcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Account returns the Account associated with the [AccountFreeCreditBalance]'s (AccountID).
//
// Generated from foreign key 'account_free_credit_balance_ibfk_1'.
func (afcb *AccountFreeCreditBalance) Account(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, afcb.AccountID)
}
