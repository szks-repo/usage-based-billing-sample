package dto

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// Invoice represents a row from 'usage_based_billing.invoice'.
type Invoice struct {
	ID                    uint64    `json:"id"`                       // id
	AccountID             uint64    `json:"account_id"`               // account_id
	SubscriptionID        uint64    `json:"subscription_id"`          // subscription_id
	TotalUsage            uint      `json:"total_usage"`              // total_usage
	TaxRate               uint8     `json:"tax_rate"`                 // tax_rate
	TaxAmount             float64   `json:"tax_amount"`               // tax_amount
	Subtotal              float64   `json:"subtotal"`                 // subtotal
	FreeCreditDiscount    uint      `json:"free_credit_discount"`     // free_credit_discount
	TotalPrice            float64   `json:"total_price"`              // total_price
	TotalPriceTaxIncluded float64   `json:"total_price_tax_included"` // total_price_tax_included
	CreatedAt             time.Time `json:"created_at"`               // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Invoice] exists in the database.
func (i *Invoice) Exists() bool {
	return i._exists
}

// Deleted returns true when the [Invoice] has been marked for deletion
// from the database.
func (i *Invoice) Deleted() bool {
	return i._deleted
}

// Insert inserts the [Invoice] to the database.
func (i *Invoice) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO usage_based_billing.invoice (` +
		`account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	i.ID = uint64(id)
	// set exists
	i._exists = true
	return nil
}

// Update updates a [Invoice] in the database.
func (i *Invoice) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE usage_based_billing.invoice SET ` +
		`account_id = ?, subscription_id = ?, total_usage = ?, tax_rate = ?, tax_amount = ?, subtotal = ?, free_credit_discount = ?, total_price = ?, total_price_tax_included = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt, i.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Invoice] to the database.
func (i *Invoice) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for [Invoice].
func (i *Invoice) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO usage_based_billing.invoice (` +
		`id, account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), subscription_id = VALUES(subscription_id), total_usage = VALUES(total_usage), tax_rate = VALUES(tax_rate), tax_amount = VALUES(tax_amount), subtotal = VALUES(subtotal), free_credit_discount = VALUES(free_credit_discount), total_price = VALUES(total_price), total_price_tax_included = VALUES(total_price_tax_included), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, i.ID, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID, i.AccountID, i.SubscriptionID, i.TotalUsage, i.TaxRate, i.TaxAmount, i.Subtotal, i.FreeCreditDiscount, i.TotalPrice, i.TotalPriceTaxIncluded, i.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the [Invoice] from the database.
func (i *Invoice) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM usage_based_billing.invoice ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// InvoiceByAccountID retrieves a row from 'usage_based_billing.invoice' as a [Invoice].
//
// Generated from index 'account_id'.
func InvoiceByAccountID(ctx context.Context, db DB, accountID uint64) ([]*Invoice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at ` +
		`FROM usage_based_billing.invoice ` +
		`WHERE account_id = ?`
	// run
	logf(sqlstr, accountID)
	rows, err := db.QueryContext(ctx, sqlstr, accountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Invoice
	for rows.Next() {
		i := Invoice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.ID, &i.AccountID, &i.SubscriptionID, &i.TotalUsage, &i.TaxRate, &i.TaxAmount, &i.Subtotal, &i.FreeCreditDiscount, &i.TotalPrice, &i.TotalPriceTaxIncluded, &i.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// InvoiceByCreatedAt retrieves a row from 'usage_based_billing.invoice' as a [Invoice].
//
// Generated from index 'created_at'.
func InvoiceByCreatedAt(ctx context.Context, db DB, createdAt time.Time) ([]*Invoice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at ` +
		`FROM usage_based_billing.invoice ` +
		`WHERE created_at = ?`
	// run
	logf(sqlstr, createdAt)
	rows, err := db.QueryContext(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Invoice
	for rows.Next() {
		i := Invoice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.ID, &i.AccountID, &i.SubscriptionID, &i.TotalUsage, &i.TaxRate, &i.TaxAmount, &i.Subtotal, &i.FreeCreditDiscount, &i.TotalPrice, &i.TotalPriceTaxIncluded, &i.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// InvoiceByID retrieves a row from 'usage_based_billing.invoice' as a [Invoice].
//
// Generated from index 'invoice_id_pkey'.
func InvoiceByID(ctx context.Context, db DB, id uint64) (*Invoice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at ` +
		`FROM usage_based_billing.invoice ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	i := Invoice{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&i.ID, &i.AccountID, &i.SubscriptionID, &i.TotalUsage, &i.TaxRate, &i.TaxAmount, &i.Subtotal, &i.FreeCreditDiscount, &i.TotalPrice, &i.TotalPriceTaxIncluded, &i.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// InvoiceBySubscriptionID retrieves a row from 'usage_based_billing.invoice' as a [Invoice].
//
// Generated from index 'subscription_id'.
func InvoiceBySubscriptionID(ctx context.Context, db DB, subscriptionID uint64) ([]*Invoice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, subscription_id, total_usage, tax_rate, tax_amount, subtotal, free_credit_discount, total_price, total_price_tax_included, created_at ` +
		`FROM usage_based_billing.invoice ` +
		`WHERE subscription_id = ?`
	// run
	logf(sqlstr, subscriptionID)
	rows, err := db.QueryContext(ctx, sqlstr, subscriptionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Invoice
	for rows.Next() {
		i := Invoice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.ID, &i.AccountID, &i.SubscriptionID, &i.TotalUsage, &i.TaxRate, &i.TaxAmount, &i.Subtotal, &i.FreeCreditDiscount, &i.TotalPrice, &i.TotalPriceTaxIncluded, &i.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Account returns the Account associated with the [Invoice]'s (AccountID).
//
// Generated from foreign key 'invoice_ibfk_1'.
func (i *Invoice) Account(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, i.AccountID)
}

// Subscription returns the Subscription associated with the [Invoice]'s (SubscriptionID).
//
// Generated from foreign key 'invoice_ibfk_2'.
func (i *Invoice) Subscription(ctx context.Context, db DB) (*Subscription, error) {
	return SubscriptionByID(ctx, db, i.SubscriptionID)
}
